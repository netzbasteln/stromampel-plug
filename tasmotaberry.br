# Does not work yet, attribute error when parsing json
# import json  # Import the JSON module
import math  # Import the math module for mathematical functions

def get_grid_signal_json()
  var cl = webclient()
  cl.begin("https://api.energy-charts.info/signal?country=de")  # Replace with your JSON API URL
  var response_code = cl.GET()

  if response_code == 200
    var response_content = cl.get_string()
    print("Response content: " + response_content)  # Log the raw JSON response

    if response_content == "" || response_content == nil
      print("Error: Received empty or nil response from API.")
      return
    end

    # Check for possible truncation manually
    var last_char = response_content[size(response_content) - 1]
    if last_char != "}"
      print("Error: Truncated JSON response. Last character is '" + last_char + "'")
      return
    end

    try
      print("Attempting to parse JSON content...")
      var data = json.load(response_content)  # Try using json.load()
      print("Parsed JSON data: " + str(data))

      var unix_seconds_list = []
      var signal_list = []

      # Check and convert 'unix_seconds'
      if data.contains("unix_seconds")
        if type(data["unix_seconds"]) == "list" || type(data["unix_seconds"]) == "instance"
          print("'unix_seconds' is an instance or list. Converting to a native list.")
          var length = size(data["unix_seconds"])
          for i : 0 .. length - 1
            unix_seconds_list.push(data["unix_seconds"][i])
          end
        else
          print("Error: 'unix_seconds' is not a list or instance.")
        end
        print("Content of 'unix_seconds': " + str(unix_seconds_list))
      else
        print("Missing field: 'unix_seconds'")
      end

      # Check and convert 'signal'
      if data.contains("signal")
        if type(data["signal"]) == "list" || type(data["signal"]) == "instance"
          print("'signal' is an instance or list. Converting to a native list.")
          var length = size(data["signal"])
          for i : 0 .. length - 1
            signal_list.push(data["signal"][i])
          end
        else
          print("Error: 'signal' is not a list or instance.")
        end
        print("Content of 'signal': " + str(signal_list))
      else
        print("Missing field: 'signal'")
      end

      # Ensure both lists are not nil and have the same length
      if unix_seconds_list != nil && signal_list != nil && size(unix_seconds_list) == size(signal_list)
        print("Valid data structure detected. Processing signals...")
        var currentTimestamp = tasmota.time()
        var closestSignal = nil
        var closestDifference = 9223372036854775807

        for i : 0 .. size(unix_seconds_list) - 1
          var timestamp = unix_seconds_list[i]
          var signal_value = signal_list[i]
          var difference = math.abs(currentTimestamp - timestamp)
          print("Timestamp: " + str(timestamp) + ", Signal: " + str(signal_value) + ", Difference: " + str(difference))

          # Check for attribute errors in this comparison and assignment
          if difference < closestDifference
            closestDifference = difference
            closestSignal = signal_value
            print("New closest signal found: " + str(closestSignal))
          end
        end

        # After processing signals
        if closestSignal != nil
          print("Closest signal found: " + str(closestSignal))
          if closestSignal == 2
            print("Setting power ON (Green Signal)")
            tasmota.set_power(0, true)
          elif closestSignal == 1
            print("Yellow Signal: No change in device status")
          else
            print("Setting power OFF (Red Signal)")
            tasmota.set_power(0, false)
          end
        else
          print("Error: No valid signal found")
        end
      else
        print("Error: Required fields are missing or could not be accessed.")
      end
    except .. as e
      print("Error parsing JSON or processing signals: " + str(e))
    end
  else
    print("Error: HTTP response code " + str(response_code))
  end
end

get_grid_signal_json()
